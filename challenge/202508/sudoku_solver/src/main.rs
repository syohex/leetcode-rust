fn solve_sudoku(board: &mut Vec<Vec<char>>) {
    fn check(v: char, r: usize, c: usize, board: &Vec<Vec<char>>) -> bool {
        for i in 0..9 {
            if board[i][c] == v || board[r][i] == v {
                return false;
            }
        }

        let x = (r / 3) * 3;
        let y = (c / 3) * 3;

        for i in 0..3 {
            for j in 0..3 {
                if board[x + i][y + j] == v {
                    return false;
                }
            }
        }

        true
    }

    fn f(r: usize, c: usize, board: &mut Vec<Vec<char>>) -> bool {
        if r == 9 {
            return true;
        }
        if c == 9 {
            return f(r + 1, 0, board);
        }
        if board[r][c] != '.' {
            return f(r, c + 1, board);
        }

        for i in 1..=9 {
            let n = std::char::from_digit(i, 10).unwrap();
            if check(n, r, c, board) {
                board[r][c] = n;
                if f(r, c + 1, board) {
                    return true;
                }

                board[r][c] = '.';
            }

        }

        false
    }

    _ = f(0, 0, board)
}

fn main() {
    let mut board = vec![
        vec!['5', '3', '.', '.', '7', '.', '.', '.', '.'],
        vec!['6', '.', '.', '1', '9', '5', '.', '.', '.'],
        vec!['.', '9', '8', '.', '.', '.', '.', '6', '.'],
        vec!['8', '.', '.', '.', '6', '.', '.', '.', '3'],
        vec!['4', '.', '.', '8', '.', '3', '.', '.', '1'],
        vec!['7', '.', '.', '.', '2', '.', '.', '.', '6'],
        vec!['.', '6', '.', '.', '.', '.', '2', '8', '.'],
        vec!['.', '.', '.', '4', '1', '9', '.', '.', '5'],
        vec!['.', '.', '.', '.', '8', '.', '.', '7', '9'],
    ];
    solve_sudoku(&mut board);
    println!("ret={board:?}");
}

#[test]
fn test() {
    {
        let mut board = vec![
            vec!['5', '3', '.', '.', '7', '.', '.', '.', '.'],
            vec!['6', '.', '.', '1', '9', '5', '.', '.', '.'],
            vec!['.', '9', '8', '.', '.', '.', '.', '6', '.'],
            vec!['8', '.', '.', '.', '6', '.', '.', '.', '3'],
            vec!['4', '.', '.', '8', '.', '3', '.', '.', '1'],
            vec!['7', '.', '.', '.', '2', '.', '.', '.', '6'],
            vec!['.', '6', '.', '.', '.', '.', '2', '8', '.'],
            vec!['.', '.', '.', '4', '1', '9', '.', '.', '5'],
            vec!['.', '.', '.', '.', '8', '.', '.', '7', '9'],
        ];
        let expected = vec![
            vec!['5', '3', '4', '6', '7', '8', '9', '1', '2'],
            vec!['6', '7', '2', '1', '9', '5', '3', '4', '8'],
            vec!['1', '9', '8', '3', '4', '2', '5', '6', '7'],
            vec!['8', '5', '9', '7', '6', '1', '4', '2', '3'],
            vec!['4', '2', '6', '8', '5', '3', '7', '9', '1'],
            vec!['7', '1', '3', '9', '2', '4', '8', '5', '6'],
            vec!['9', '6', '1', '5', '3', '7', '2', '8', '4'],
            vec!['2', '8', '7', '4', '1', '9', '6', '3', '5'],
            vec!['3', '4', '5', '2', '8', '6', '1', '7', '9'],
        ];
        solve_sudoku(&mut board);
        assert_eq!(board, expected);
    }
}
